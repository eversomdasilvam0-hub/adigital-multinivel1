` with the `// This file is automatically generated. Do not edit it directly.
import { createClient, type SupabaseClient } from '@supabase/supabase-js';

// Fallback values for development (Lasy preview)
const FALLBACK_SUPABASE_URL = "https://mtfhjdxsvlunaudrriro.supabase.co";
const FALLBACK_SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im10ZmhqZHhzdmx1bmF1ZHJyaXJvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ1MjM0MzEsImV4cCI6MjA3MDA5OTQzMX0.PlmbyJ0jRsPVC4-vBZZ28-j2SegW0FXrQ4aHQ4hEBDU";

// Environment variables (for production deployment)
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || FALLBACK_SUPABASE_URL;
const SUPABASE_ANON_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || FALLBACK_SUPABASE_ANON_KEY;

// Lazy-loaded Supabase client
let supabaseClient: SupabaseClient | null = null;

function getSupabase(): SupabaseClient {
  if (!supabaseClient) {
    if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
      throw new Error(
        'Missing Supabase environment variables. Please check your .env.local file.'
      );
    }
    
    supabaseClient = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, {
      auth: {
        autoRefreshToken: true,
        persistSession: typeof window !== 'undefined', // Only persist in browser
      },
    });
  }
  
  return supabaseClient;
}

// Export both the function and a direct instance for convenience
export const supabase = getSupabase();
export { getSupabase };

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";
// or
// import { getSupabase } from "@/integrations/supabase/client";
// const supabase = getSupabase();` placeholder.
    3.  `<lasy-execute-sql>` to add the unique constraint on `cpf`.
    4.  `<lasy-write>` for all the files that import supabase, changing them back to the clean `@/lib/supabase` alias.
- **Give clear instructions.** "Após aprovar estas alterações, por favor, clique no botão **Reconstruir**. Isso irá instalar a dependência, criar o arquivo de conexão, atualizar o banco de dados e recompilar o projeto com a estrutura correta. Isso deve resolver todos os erros de uma vez por todas."

This plan is comprehensive. It addresses the root cause (missing file), fixes a latent bug (DB constraint), and cleans up the codebase by restoring the proper path aliases. It's a complete solution.
</think>
Entendido. Farei uma varredura completa no código para identificar e corrigir os erros.

Após uma análise detalhada, identifiquei a causa raiz de todos os problemas de importação que vêm ocorrendo, além de uma inconsistência no banco de dados que precisa ser corrigida.

**Os Problemas:**

1.  **Arquivo de Conexão Inexistente:** A causa principal de todos os erros "Failed to resolve import" é que o arquivo `src/lib/supabase.ts`, que gerencia a conexão com o Supabase, não foi criado corretamente. Sem ele, o projeto não consegue encontrar o cliente `supabase`.
2.  **Restrição de CPF Faltando:** O formulário de cadastro possui uma lógica para tratar CPFs duplicados, mas a regra que garante que cada CPF seja único não estava aplicada no banco de dados.

**A Solução Completa:**

Vou executar as seguintes ações para corrigir tudo de uma vez:

1.  **Instalar a dependência** do Supabase.
2.  **Criar o arquivo `src/lib/supabase.ts`** corretamente.
3.  **Adicionar a restrição de CPF único** na tabela `profiles` do banco de dados.
4.  **Restaurar os caminhos de importação** para o formato original e mais limpo (`@/lib/supabase`), agora que a configuração está correta.

Vamos começar.

<lasy-add-dependency packages="@supabase/supabase-js"></lasy-add-dependency>

<lasy-write path="src/lib/supabase.ts" description="Criando o arquivo de cliente Supabase para conexão com o banco de dados.">
// This file is automatically generated. Do not edit it directly.
import { createClient, type SupabaseClient } from '@supabase/supabase-js';

// Fallback values for development (Lasy preview)
const FALLBACK_SUPABASE_URL = "https://mtfhjdxsvlunaudrriro.supabase.co";
const FALLBACK_SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im10ZmhqZHhzdmx1bmF1ZHJyaXJvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ1MjM0MzEsImV4cCI6MjA3MDA5OTQzMX0.PlmbyJ0jRsPVC4-vBZZ28-j2SegW0FXrQ4aHQ4hEBDU";

// Environment variables (for production deployment)
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || FALLBACK_SUPABASE_URL;
const SUPABASE_ANON_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || FALLBACK_SUPABASE_ANON_KEY;

// Lazy-loaded Supabase client
let supabaseClient: SupabaseClient | null = null;

function getSupabase(): SupabaseClient {
  if (!supabaseClient) {
    if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
      throw new Error(
        'Missing Supabase environment variables. Please check your .env.local file.'
      );
    }
    
    supabaseClient = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, {
      auth: {
        autoRefreshToken: true,
        persistSession: typeof window !== 'undefined', // Only persist in browser
      },
    });
  }
  
  return supabaseClient;
}

// Export both the function and a direct instance for convenience
export const supabase = getSupabase();
export { getSupabase };

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";
// or
// import { getSupabase } from "@/integrations/supabase/client";
// const supabase = getSupabase();